/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoreLearnImport } from './routes/store-learn'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as TodosIndexImport } from './routes/todos/index'
import { Route as authenticatedIndexImport } from './routes/(authenticated)/index'
import { Route as TodosTodoIdImport } from './routes/todos/$todoId'
import { Route as authenticatedPostsIndexImport } from './routes/(authenticated)/posts/index'
import { Route as authenticatedPostsPostIdImport } from './routes/(authenticated)/posts/$postId'

// Create/Update Routes

const StoreLearnRoute = StoreLearnImport.update({
  id: '/store-learn',
  path: '/store-learn',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const TodosIndexRoute = TodosIndexImport.update({
  id: '/todos/',
  path: '/todos/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedIndexRoute = authenticatedIndexImport.update({
  id: '/(authenticated)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TodosTodoIdRoute = TodosTodoIdImport.update({
  id: '/todos/$todoId',
  path: '/todos/$todoId',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedPostsIndexRoute = authenticatedPostsIndexImport.update({
  id: '/(authenticated)/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedPostsPostIdRoute = authenticatedPostsPostIdImport.update({
  id: '/(authenticated)/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/store-learn': {
      id: '/store-learn'
      path: '/store-learn'
      fullPath: '/store-learn'
      preLoaderRoute: typeof StoreLearnImport
      parentRoute: typeof rootRoute
    }
    '/todos/$todoId': {
      id: '/todos/$todoId'
      path: '/todos/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof TodosTodoIdImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexImport
      parentRoute: typeof rootRoute
    }
    '/todos/': {
      id: '/todos/'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosIndexImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/posts/$postId': {
      id: '/(authenticated)/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof authenticatedPostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/posts/': {
      id: '/(authenticated)/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof authenticatedPostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/store-learn': typeof StoreLearnRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
  '/': typeof authenticatedIndexRoute
  '/todos': typeof TodosIndexRoute
  '/posts/$postId': typeof authenticatedPostsPostIdRoute
  '/posts': typeof authenticatedPostsIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/store-learn': typeof StoreLearnRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
  '/': typeof authenticatedIndexRoute
  '/todos': typeof TodosIndexRoute
  '/posts/$postId': typeof authenticatedPostsPostIdRoute
  '/posts': typeof authenticatedPostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/store-learn': typeof StoreLearnRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
  '/(authenticated)/': typeof authenticatedIndexRoute
  '/todos/': typeof TodosIndexRoute
  '/(authenticated)/posts/$postId': typeof authenticatedPostsPostIdRoute
  '/(authenticated)/posts/': typeof authenticatedPostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/login'
    | '/logout'
    | '/store-learn'
    | '/todos/$todoId'
    | '/'
    | '/todos'
    | '/posts/$postId'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/login'
    | '/logout'
    | '/store-learn'
    | '/todos/$todoId'
    | '/'
    | '/todos'
    | '/posts/$postId'
    | '/posts'
  id:
    | '__root__'
    | '/about'
    | '/login'
    | '/logout'
    | '/store-learn'
    | '/todos/$todoId'
    | '/(authenticated)/'
    | '/todos/'
    | '/(authenticated)/posts/$postId'
    | '/(authenticated)/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  StoreLearnRoute: typeof StoreLearnRoute
  TodosTodoIdRoute: typeof TodosTodoIdRoute
  authenticatedIndexRoute: typeof authenticatedIndexRoute
  TodosIndexRoute: typeof TodosIndexRoute
  authenticatedPostsPostIdRoute: typeof authenticatedPostsPostIdRoute
  authenticatedPostsIndexRoute: typeof authenticatedPostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  StoreLearnRoute: StoreLearnRoute,
  TodosTodoIdRoute: TodosTodoIdRoute,
  authenticatedIndexRoute: authenticatedIndexRoute,
  TodosIndexRoute: TodosIndexRoute,
  authenticatedPostsPostIdRoute: authenticatedPostsPostIdRoute,
  authenticatedPostsIndexRoute: authenticatedPostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/about",
        "/login",
        "/logout",
        "/store-learn",
        "/todos/$todoId",
        "/(authenticated)/",
        "/todos/",
        "/(authenticated)/posts/$postId",
        "/(authenticated)/posts/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/store-learn": {
      "filePath": "store-learn.tsx"
    },
    "/todos/$todoId": {
      "filePath": "todos/$todoId.tsx"
    },
    "/(authenticated)/": {
      "filePath": "(authenticated)/index.tsx"
    },
    "/todos/": {
      "filePath": "todos/index.tsx"
    },
    "/(authenticated)/posts/$postId": {
      "filePath": "(authenticated)/posts/$postId.tsx"
    },
    "/(authenticated)/posts/": {
      "filePath": "(authenticated)/posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
