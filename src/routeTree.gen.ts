/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TodosImport } from './routes/todos'
import { Route as StoreLearnImport } from './routes/store-learn'
import { Route as PostsImport } from './routes/posts'
import { Route as AboutImport } from './routes/about'
import { Route as TodosTodoIdImport } from './routes/todos.$todoId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'

// Create/Update Routes

const TodosRoute = TodosImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRoute,
} as any)

const StoreLearnRoute = StoreLearnImport.update({
  id: '/store-learn',
  path: '/store-learn',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const TodosTodoIdRoute = TodosTodoIdImport.update({
  id: '/$todoId',
  path: '/$todoId',
  getParentRoute: () => TodosRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/store-learn': {
      id: '/store-learn'
      path: '/store-learn'
      fullPath: '/store-learn'
      preLoaderRoute: typeof StoreLearnImport
      parentRoute: typeof rootRoute
    }
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/todos/$todoId': {
      id: '/todos/$todoId'
      path: '/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof TodosTodoIdImport
      parentRoute: typeof TodosImport
    }
  }
}

// Create and export the route tree

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface TodosRouteChildren {
  TodosTodoIdRoute: typeof TodosTodoIdRoute
}

const TodosRouteChildren: TodosRouteChildren = {
  TodosTodoIdRoute: TodosTodoIdRoute,
}

const TodosRouteWithChildren = TodosRoute._addFileChildren(TodosRouteChildren)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/posts': typeof PostsRouteWithChildren
  '/store-learn': typeof StoreLearnRoute
  '/todos': typeof TodosRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/posts': typeof PostsRouteWithChildren
  '/store-learn': typeof StoreLearnRoute
  '/todos': typeof TodosRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/about': typeof AboutRoute
  '/posts': typeof PostsRouteWithChildren
  '/store-learn': typeof StoreLearnRoute
  '/todos': typeof TodosRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/posts'
    | '/store-learn'
    | '/todos'
    | '/posts/$postId'
    | '/todos/$todoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/posts'
    | '/store-learn'
    | '/todos'
    | '/posts/$postId'
    | '/todos/$todoId'
  id:
    | '__root__'
    | '/about'
    | '/posts'
    | '/store-learn'
    | '/todos'
    | '/posts/$postId'
    | '/todos/$todoId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AboutRoute: typeof AboutRoute
  PostsRoute: typeof PostsRouteWithChildren
  StoreLearnRoute: typeof StoreLearnRoute
  TodosRoute: typeof TodosRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AboutRoute: AboutRoute,
  PostsRoute: PostsRouteWithChildren,
  StoreLearnRoute: StoreLearnRoute,
  TodosRoute: TodosRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/about",
        "/posts",
        "/store-learn",
        "/todos"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId"
      ]
    },
    "/store-learn": {
      "filePath": "store-learn.tsx"
    },
    "/todos": {
      "filePath": "todos.tsx",
      "children": [
        "/todos/$todoId"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/todos/$todoId": {
      "filePath": "todos.$todoId.tsx",
      "parent": "/todos"
    }
  }
}
ROUTE_MANIFEST_END */
